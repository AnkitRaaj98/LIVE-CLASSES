{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0cdbd8af-4a2b-4d95-8a0d-8883a9ba2d32",
   "metadata": {},
   "source": [
    "q1 : create your own class to perform a list search operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "dd3b396c-1368-4eb6-bd6e-bf97dfd56607",
   "metadata": {},
   "outputs": [],
   "source": [
    "import logging as lg\n",
    "\n",
    "lg.basicConfig(filename = \"Logger.log\" , level = lg.DEBUG, filemode = 'w' , format = \"%(asctime)s %(levelname)s %(message)s\")\n",
    "\n",
    "class list_search:\n",
    "    \n",
    "    def __init__(self , data):\n",
    "        self.data = data\n",
    "        \n",
    "    def search(self , value):\n",
    "        try:\n",
    "            lg.info(\"Searching..\")\n",
    "            for i in range(len(self.data)):\n",
    "                if(self.data[i] == value):\n",
    "                    lg.info(\"Succesful search\")\n",
    "                    return   True\n",
    "            lg.info(\"Unsuccesful Search\")\n",
    "            return False\n",
    "        except Exception as e:\n",
    "            lg.error(\"Error Occured\")\n",
    "            lg.exception(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3da92f87-66cd-4e8f-a958-8c6d3c4e0073",
   "metadata": {},
   "outputs": [],
   "source": [
    "listsearch = list_search([1,2,3,4,5,6])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c2a36597-ab87-401a-b4fc-3a94715b4efb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listsearch.search(45)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ee04917b-8238-4a66-b515-612bb6520d28",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listsearch.search(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0dfa2d2d-31a5-4547-8ce4-d91702520b91",
   "metadata": {},
   "source": [
    "q2 :create a class for dict new element addition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8eeb95e9-cf52-4f1b-a20c-5edfa85fbd3a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import logging as lg\n",
    "\n",
    "lg.basicConfig(filename = 'sol_2.log' , level = lg.DEBUG , filemode = 'w' ,format = \"%(lineno)d %(asctime)s %(levelname)s %(message)s\")\n",
    "\n",
    "class Add_into_dict:\n",
    "    \n",
    "    def __init__(self,diction):\n",
    "        self.diction = diction\n",
    "        \n",
    "    def element_to_add(self,element):\n",
    "        lg.info(\"into the element_to_add method\")\n",
    "        if type(element) == dict:\n",
    "            try:\n",
    "                lg.info(\"inside the try>>>>..\")\n",
    "                self.diction.update(element) #important line\n",
    "                lg.info(\"New element is added\")\n",
    "                lg.info(f\"{self.diction}\")\n",
    "            except Exception as  e:\n",
    "                lg.error(\"there ios some issue with the code\")\n",
    "                lg.error(e)\n",
    "                \n",
    "        else:\n",
    "            lg.error(f\"please check {element} is valid dict or not\")\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f74fcb2f-8c92-4746-99f1-03ca3ec02920",
   "metadata": {},
   "outputs": [],
   "source": [
    "add_dict = Add_into_dict({\"key1\":\"ankit\" , \"key2\":\"kumar\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "7995a5c3-1dde-4023-9fa8-ddf90de09966",
   "metadata": {},
   "outputs": [],
   "source": [
    "add_dict.element_to_add({\"key3\":1234})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "0b719918-6847-4b37-b664-4a2cffca685b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'key1': 'ankit', 'key2': 'kumar', 'key3': 1234}"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "add_dict.diction"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97de2f0c-d9e6-4fad-b0ae-a1ba7abf9948",
   "metadata": {},
   "source": [
    "q3 : create a class for tuple data extraction operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c056d929-1026-4003-a4dc-ff2b46094528",
   "metadata": {},
   "outputs": [],
   "source": [
    " class Tuple:\n",
    "        \n",
    "        def __init__(self , t1):\n",
    "            self.t1 = t1\n",
    "            \n",
    "        def extract(self ):\n",
    "            start = int(input('Enter the start index number'))\n",
    "            end = int(input('enter the end index number'))\n",
    "            return self.t1[start : end]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "7799c0fb-9ca8-4554-afcf-ed4a473116ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "obj_tuple = Tuple((2,3,4,5,\"ankit\" , \"kumar\" ,45,2,6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "9dd9ee8c-877f-448d-8682-7133365a8532",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the start index number 2\n",
      "enter the end index number 45\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(4, 5, 'ankit', 'kumar', 45, 2, 6)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "obj_tuple.extract()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5c712cf-992e-4cb5-a3a4-5b351c606657",
   "metadata": {},
   "source": [
    "q4 : insert ,update ,delete something from mysql"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "38ab64b3-4fef-4a6f-99ca-ea5a4d6d46ab",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
